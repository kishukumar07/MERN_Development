Aggregation -Aggregate

Aggregate -> what do u understand by it ? => is to collect something 


Find all the students in a school, count the no of boys and girls, then you want to find average marks of each group in xyz evaluation , again do some operation on that

===>>How will you do it  with normal query
              const  boysgroup = db.collection.find({gender: "male"})
              const  girlsgroup = db.collection.find({gender: "Female"})
                 

           const  boyscount =boygroup.length; 
           const  girlscount =girlgroup.length;
           const totalStudents = boysgroup.length+girlsgroup.length     


and so on.....for finding avg marks ......for each group ........ its getting complex on server side right mean have to write codes for each step .....

Thats when Aggregation comes in ....To write complex query in a BETTER WAY 


Aggregation - helps us with writing complex queries and 1st point bellow. 
  
  1. Filtering happening on the DB level  - Basically reducing the server load 
                 Vs
  2. Filtering happening on the server    


Advantages of Aggregation 
                   -reducing the server load 
                   -dont want to get unnessessary data from databse 
                   -less codes on server side 
                   -all those things

 


 Pipeline -  its connection of stages  like... =[  stage1 (each single pipe)..stage2...stage3....stage n ]=
              
              eg..stage1 passing fresh water to stage2  (here we have a process which add salt)....and passes to stage3 (adding suger ) passing the solution to last stage -end of the pipeline 
    
    *The point is that " The Output of each Stage is  the input for the  next stage "



AggregationPipeline ->      [stage1(query1)-> stage2(query2) ->Stage3(query3)->stage n(query(n)) ]


                             eg. lets take AggregationPipeline1...

                             ====[1000ppldata --> stage1(anycriteria like height is less than x)  -->> stage2(just printing ?is there 1000ppl data -nope) --->lets 200ppl---> stage3() ....and so on......]=====
                               

                            OneMore_Aggregation_Pipeline...
                            
                            ====[1000ppldata --> stage1(anycriteria like height is less than 5.2feet) -->200ppl -->> stage2(criteria weight is 100+kg) --->noone--> 0ppl---> stage3(printtop4ppl)---nope! 0 ]=====
                    

         *The point is that " The Output of each Stage is  the input for the  next stage "
          mean the 
                   input of n stage === output of n-1 stage 




//Syntax 
 db.students.aggregate([ { stage1 } , { stage2 } ,{ stage3 } , { stage_n } ]) ->output

   //each stage in bracket format seperated with , inside an arraystructure
   //and within each satge we have something called as  "Aggregation Operators"; 


                    **There are various Aggregation Operators : may check docs for it
                    $match 
                    $filter 
                    $limit
                    $group 
                    $lookup 
                                 -you may have come across this dollor symbol  while expolored documentation for mongodb  right ! 
                                         like..$sum $average ....


you can search for ---- "Aggregation Operators documentation"

      #dtaset for performing actions on it :-  "https://gist.github.com/kishukumar07/057288cbc95673baca116e7c5ebc974b"


                 --acessed  data ??   created a collection in db "mongoAggregation"
                                                              created a  collection  
                                                              "orders and inserted the data in it "      
    
  visit from here  for ./mongosh.md ==>> 

                         
1.Printing 
    db.orders.aggregate([]) //like.... db.orders.find({})
    
2.$limit 
    db.orders.aggregate([{$limit:2}]) //like.... db.orders.find({}).limit(2) 

3.$sort   
    db.orders.aggregate([{$sort: {field : -1/1} }])   //like.... db.orders.find({}).sort(field:-1/1) ---->> -1 Descending/ +1Ascending 

4.using $sort and $limit together
    db.orders.aggregate([{$limit:3},{$sort:{_id:-1}}])  //like... db.orders.find({}).limit(3).sort({field:1/-1})
    eg.find to top 3 cheapest pizzas   
     
    //can also interchange order of the stages like first we sort and then we limit the result  (try it ) --//order of stages matters with  aggregation 100%
      
    eg.find to top 3 cheapest pizzas   -and that why in this case we have to sort by price then limit  otherwise it'll not give  proper documents ... think why ? and try to explain  -its operation on only 3 pizzas if we limit first and then sort    & may be the all 3 limited pizzas have highes price then it will sort---- 
      --- 
     assume that we have one more stage  so how many documents will stage 3 have ? three  

5.$match   
     db.students.aggregate([{$match: {field:field'svalue} }])     //like.... db.students.find({city:"pune"})
      
     if there is stage2 where is the students be from ?

     db.students.aggregate([{$match: {field:field'svalue} } ,{$match :{anotherfield:fieldvalue}} ])     //like.... db.students.find({city:"pune"},{place:"jharkhand"})

      eg.print all the small size pizzas 
      =>> 
      eg.find all the medium size pizzas whose price is less than 20 
      =>>    //db.orders.aggregation([{$match:{size:"medium"}} ,{$match:{ price:{$lt:20} }} ])
      eg.find all the medium size pizzas whose price is lt 20 


      INSTEAD OF WRITTING THE $match in all stages we can do it in one -->>
       // can combine both in one as well
      mongoAggregation> db.orders.aggregate([{$match:{size:"medium"}} ,{$match:{price:{$lt:20}}}])
       // OR
      mongoAggregation> db.orders.aggregate([{$match:{size:"medium",price:{$lt:20}}}]) //no need to use two $match mongo aggregation Operator 
   

   **   maybe at this time i need to short in one more stage 
      then we can write otherstage containing $sort operator 
    
       ==>mongoAggregation> db.orders.aggregate([{$match:{size:"medium",price:{$lt:20}}} , {$sort:{price : -1 }}  ]) //no need to use two $match mongo aggregation Operator , other stage containing sort 


    **again we can limit it and so on.... stage n....


    


